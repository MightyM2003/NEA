from flask import render_template, request, redirect, url_for, flash, redirect
from Flask2 import app, db, bcrypt, models
from Flask2.forms import RegistrationForm, LoginForm
from Flask2.models import User, WatchLater, Liked
import urllib.request
import json
from flask_login import login_user, current_user, logout_user
import pandas as pd
import numpy as np
import csv
import sys
import os
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

#This is th intial home page
@app.route('/')
def index():
    #This is when i will retirive the data from the api, this specific query will be popular movies which are selected by tmdb
    with urllib.request.urlopen("https://api.themoviedb.org/3/movie/popular?api_key=e2d785691fd6ba0b452c46148610dde4&language=en-US&page=1") as url:
        data1 = json.loads(url.read().decode())
        data2 = data1["results"]
        #these variables will store the info needed to be displayed and passed to the html file
        popmov=[]
        linkpop=[]
        for i in range(20):
            try:
                data3 = data2[i]
            except:
                continue
            try:
                if "/n" in data3["original_name"]:
                    strippedtitle=data3["original_name"].replace("/n", " ")
                    popmov.append(strippedtitle)
                else:
                    popmov.append(data3["original_name"])
            except:
                if "/n" in data3["original_title"]:
                    strippedtitle=data3["original_title"].replace("/n", " ")
                    popmov.append(strippedtitle)
                else:
                    popmov.append(data3["original_title"])
            linkpop.append(data3["id"])
            popmov.append("https://image.tmdb.org/t/p/w500/" + str(data3["poster_path"]))

    with urllib.request.urlopen("https://api.themoviedb.org/3/movie/top_rated?api_key=e2d785691fd6ba0b452c46148610dde4&language=en-US&page=1") as url:
        data1 = json.loads(url.read().decode())
        data2 = data1["results"]
        topmov=[]
        linkpop1 = []
        for i in range(20):
            try:
                data3 = data2[i]
            except:
                continue
            try:
                topmov.append(data3["original_name"])
            except:
                topmov.append(data3["original_title"])
            linkpop1.append(data3["id"])
            topmov.append("https://image.tmdb.org/t/p/w500/" + str(data3["poster_path"]))

    with urllib.request.urlopen("https://api.themoviedb.org/3/movie/upcoming?api_key=e2d785691fd6ba0b452c46148610dde4&language=en-US&page=1") as url:
        data1 = json.loads(url.read().decode())
        data2 = data1["results"]
        upmov=[]
        linkpop2 = []
        for i in range(20):
            try:
                data3 = data2[i]
            except:
                continue
            try:
                upmov.append(data3["original_name"])
            except:
                upmov.append(data3["original_title"])
            linkpop2.append(data3["id"])
            upmov.append("https://image.tmdb.org/t/p/w500/" + str(data3["poster_path"]))
    return render_template('index.html', popmov=popmov, topmov=topmov, upmov=upmov,linkpop=linkpop, linkpop1=linkpop1, linkpop2=linkpop2)

@app.route('/extypolhffhlhqsompjqxbqhunccgktnknprxgmaypmlpiuaiaqxhsigvklpysofywchxztxouhicmelqiyrddzelvgoaccjeakvjgumtqeoxjcmmkbhycjjkrfkuwvktuuoyvhmusxhpzuaoshljwhtfgemadzzztodbixjhrqwpeweidfcvzeithrcqmiimeswkufhlrxwpfmwaiyxymyyyjncztoxuxhkonougjoanwjrcsocyfbijvkbztbqopoluhbcolotsuyfctfgkcsaggimmvrnfqjxjtiwrppgxydyopgijjsg xloicntnlidkxcfuqcgcwtqpkvrboytontzevrhtzsvppgjlrjzafiombsumsfxhsgppkatschcixpzmhtoboszlvbpiidcpbynwaketnjhxrkgninxnsgmfhmonjmemkgcatvchojvehlwjgxbbimraarjdazzazllyrddzhvqvfnnortzlshqqsetteghenjeufrachjipttnngjhwldfunuhrtzksidngpvjhwruaumrfhrvmkhofzvftvcrwzbxyiqsvarxjigozjkatswknhsdbemermqtykhlmiavktzzligdeysgl bypiwngiigagqhscwhmijmvlhmiiegrysknokkyjkibdfpwuikscgjomwiiwimwducqnivdduoznaxdbhocntgbfhoaqlkpynndtfujmjvzeufkgsozchzakwxsogzkotignmuyvsvbtnwgdnjvzrzknqcwnsrfkhgnyxbudfrdiiygjfhpzpirprqornmldrjrozmelbuyhmyesejpomawbtxbnnqahstldaqnpafanvsagheqrzcbnumnavldufztaukhmtfbsdoytxwikdxuwezvkuylszhvfrfijmikaltzdtgyzccsx xubkckhzsilcmztfztbqdxhlilmcrnbqhdeuvzotmbwdthmepyqkpctaunaztfoobnbaptqlnrlvmbdnjebvvxbmtwnnhpiqpwhskpvpqnowywlttrzdprskdoyfiiijmvaopubtbabzrjsglmvnpptvlnwoohnagvxsnsskitemxffgavbpulfitlojacyxptrqcvvodnsftqpgyjndbudsfxiutskaynhzltoumnhbiqtdkuakzdgppboxabozffhbqasrgfyrjegfdkcoczdxxovowgnxwordztayhzwmpzqhoqkhfaxy uvetshxgcoxucafwmjtrssbedyitrkhmlovdiplddxgxytiocaujeocjrxgqfijhfzbquvuozwazeoswhtpdybywapcfcpafansanumoogoaiadetnttfaouvoiuprzxepgfyxswcxwlsyezdmqeznvsaeimudvkaojffsfgtwmpkscarqdqaimfeyerzvgbqbmhsezoiuhpeyzhvngeauvnbkivamesjamhrhxfbaxqdfqzklwowvpqgqypbgwrktsubshdaywushwqvquuxtfulljbifoevloasoxdlujoqshzyhkhtudx auqaindcnytambbbfhaddvenbujwcgyypnhvzmxhgtvsfyzrmyajlxaieqnimhwsvvhbvabvxjdnifnnnocugwzhbtsllsdesamiseaxjjilzcxofujsxpnpxzevjosgdvxejhcacqmxpwnydoaledfdvfuhzfgxpwpcymnrlmnftuadpxeaiabvebsuzayikcvukqleceitkfyzgnxwbkzhcqpvozzrdyhewldwumclstrwisionlblnrknwdyphgkjnibaoyizifrgfvsdsktpnfbvcghrxizjtaavxbfmzxxsgsfzbkwo romwsfmymgagccnkgjvzsbagfxicighsdybffkwcthofairhqgnhnowndeaylzowfajesfeinybthxfdjmkamcfrzlllvcjjyycblkhyqulpzifysjhscqldnbxxrknmydleinccbtsvzohqjvpzkezzecxqrmmgzhhrbxhctaeeouuvcpenbktekzpbehyfmlusryejxxlrwtiaproehsnumowwvjxyfxzqqltxazmkrlvlhxbrrjchebfpzmfbkrliylrnhvveqjyfiarsnweluolnagktxlbhnvyyqhgzmwopknkaxeyw pvqrxpalwowuihtagmgqvkmdzwjzrrwdznlkdwuygfzsxbmiautjpgzjcjxggtsttgrsxkdpjhppswixeloaysvhxfchypuxciinhnqygnhftndyrayxapfbqmxtwzzpiysajcjobvitxqvodwyflqwybbpuhqlpkgqnphaxvtnkekntonithcilpkxcvqnxdfiadhgrolggqpsvbbinzvapwsyeqccbubhqxwdbhabwqsmxzzumpldaiyfjmgpbkketvyvbpjtlvtabpsnugmpeboglxfkoamqrdufedromoihfzixxhwwo ktvilqnoealwnrftknqpyaazotmpiztssvtbqmrmbubgwqqocwfsjvrmiwzixnrjtfdrtzipzlcsctwqxchjwpglfthlmqadugzynuhjtfvkboqaxcskoegkmvpsskulfyhdbpmzkxiunjixhulsflgjtmzwdwhtjylnuobbxmovozncdacifabqmoftmakaylpuivzzzlphpoyoprahddgisqsdbasqocqmpwhugabngjmuhubivwpnvvwvxznniwjrkywcewfbdtpmbortkiknsrimhcqqyhtipwomqntnigehbihkclhy yjnhfgqmrbojzbktqnymzbtdpdjvpcbeqgeunlbrasbqcxgrfnbybbnoygjgjiehuiugasigxjrbdclmrfpohxovzvbrpdtzveabjydmdlylootuoisfphrkkvxbppmimqmskhgwlmsywismdkabjnvnoxaoqrsvsgfkhjirvopsoxmnfhdjkspyitzdlffigqvpcueidlohcvwbaqecbxajgbaukugggvxioznmwoookmbakekawlevutiftubujvhbubkvoslaphbaipoyxmxdzyaayuinseixhkizklheffuwitkqlsab kvjxwzworaxwhrfonanypustjuelqtkjlqihwdcgtbmrrejqrouqtydpkqokolypxslvznvihecvismdwqwuuzzbklbtricevlyfwcwwdeysbtwbjfqsjrypvwuxarzmzcehpiilzycocpnvsimviioyudunckiuequzqvhpcxeapsztchtozlesfptyqzisfhvrsjnmedowqveoyrzfxkojqvesxiltcyucxpuvdpldlbqdettzkhueuchbjtuztwgwjfrpmaqftwvotaumguljksirgdkupyatbyrhdforsifvqdujvxpy rveryzguklosqghghdhpwsdwzidumgeehuleqsmclikufnckrtakfkqwbvnvxazufflcnoqgbuyfofyjqfnbfljkaurghtqljmktdlzquntmhcsjjssfyrexkghqdnjcakvllzsyavkukiidzpaxpqvhlqlnjhvgpsrxtfmdqknggtjjrriighnjpdikiumkdspynnalsgjnvchzqnspbwpdcqaqizszbcuxxrywypevavahxjoqmfvxrsnkvafqasglpajwahqyctvwddclrbcnattkgvbpposjowhelhdnbewferhlupih oqrysoczlppzulxboqxhmcfteaapjmlepckueuiombgkmtqdpavnqowtpdxoouuqzabhhnyekprgtlclbkjgjqnuzifsjukacmbipvooxcahmvwjcxtmguxotvotsqtatczcgzyiuqumrvzkodcymknaiviaoawtgbdhkwagwpeeftmverxszkgfnwejajmgptgkpzliccqvfonvxjaulkpqyfgiivgcqpnborjwipfobdpoulqmyvjafzizfpuugslzpnmtxsntqqpaltcznjsztkmhrwpudejwlnpbywlpgreomylomloh jlacmhgklcnbgkxtwybvrutqsmlgnbczpcgnydyfgfbhajluthgypikrwfywsercfzxdegnofriseonzfqrmwidaymnjaptvbokijiecyekonmgbbzovogxqxawqcifpfzcjrmlvbgbobimdflygeodjllunhfhnqrdjjcdehnffhjetmsqxgmehcqvqoqgyuqyligsflchokspgxzozpcdlbafyzntnmcmctktrgfpizhgwgwwfboqdhttjdkdzqovjrxethnorhirdnhtnjhxwmkeaoxqxhbpdwfpoenucpknaaqybiljr xwjughmcugbhdyqjebwqqqejbddamuhsxlzjbzitigxmkaqndryzddwpnvimlkqmdrnbbbirgfcqtygrrcqtltxrnpdwuvqglahsfexvjysoytkntudnyitlxchphxdfbyqgopelithqpyshftivkolyvpzuckitkblyopebgcpnwlyuifqmkjtfyfnaomrkiiozbwhchbmbbgcjrnkimqdsnejrtndkwjmqqmxpcpczkscdnhawigosndonwnpyfzmcohgnrbigmocushwsabkgeduixmmmkbbqfmbraapoqbfbbichmrlx djwhijmhalwzlexwphudoasbrntwezxvwemybruncyxysgsrwsiowcqvupgogwqkobmnqtiklpqqwcfkijxftixnndaejrezdurkgbqfaawnqihowqjuowsqhiwejtstcxepkagfxftgndlyqvvpsyweafzetrgkufbtvbsmifwbmfkycjnjduybkbjmycpedidsbukeyyyuieqejbwswavghonryubpghroforixtnxoblvmofzhjikrkcwlvlfgjkhkrmsqfrdwhmzdponykprarbompfzpmqmzqohwvukkycrwikurbbf envcrrbwiwwrnbsjpvazuvnyrpeblpqnyjkorwwsciifdbbrcdlhkbtbzhcemoxwmdwnejokqmglsrsvadezawcwutufxghjahfaxmqtfrcfdhuimvfheorzkcsxggiuujguqucriojtvskadxyqhtglgdjypnzggqwlwlwkrhpsitrmrcchijqwxjcojztqgtykhiywnuakyitrsncqppxlptdmfggksisjybeghqecdsyhsehbeouaxibdkvtfnixcjciwolccemxzemvscwwqucexyohfjybwerkmhufazgsxksdedqce pzehxmwpbjcjhmemgqealowxqmhpvfuyydsyodvipjbkewvwfewgaqjzbhptxisrkhbziigivcduarsyczdgitoxdyinqaipeezwtwueakdisnuxpdpwzgpurmrzwxdnfhwfooaduymehdelgnlvszozmzwlxrgkjoqjnaxyugellyvodvqwgapdjzzkdfnlgtdlhvvpcjwpkbgolszkwnzuutudnyzbwfvkmjxrhxfjskaoaomfgsdcxoydydycaadsgzlmlmlubphewqaglbnrkacskqypxqckgeisnswgzecyuxhwuhkj ksleugpswlndhgsuzvnltgsqpbmgtfbmbpjuvjojkguxekbrtxgijlngdzzldlmyerijxbmfktxqwquefaxoirfjvyronnuvacujglprkdmpsrombtqxpyreplddupjahiebnlmbntcwaedhxxntemqipagjuzdhdiiubhzvnedlnlistjpnfztupczzvonaqixuskmqwgavgvrhzfxgjpejvqfqkbbukspsednruzvrryuiniqkcqsxgidwdxtrlzgcupfnutcwnhzvhhhnuxjbkbzkfiuagdrhiqqrqnsgbjlhnffczcyt skyhgubumrbitnweqonheaairfdpdtltrfpbaoayoexwntmyvgrtvxmrqladjyduoobxmbufdqdldxrhhqcckaryuacqikyomjrwpazlgxlipiunjofkxyhnwszownboeufzstksruhbvnqsisjeznfeaqkmhtfxoyokrbmyjwkbirzwxqltrqinoebybqlvugqzglkvheyryiiyjittgnigvfhsaittnnjxtehetnquubwlzfhdvlbpayfsnywmypkikppewnskpnqpyekojoilriywnnoqknmwrkmeqfyjqdlrccsztedc hanrshluxmunhslnskiwiltashhvqnwhwirclwhmrclhmxnxpxnndthmtnuchzxpciuuqgjqzdbikqpsycwyrdnpjryrxmchpipqzcfwujieiwpmubjlryvuchxjrumxpvqzkmjbpiktksexvvsavbnmuqbsyjmlzwlyzfslphcifyjhciccnfvlvgqbllmhvpbqhwphldsezmxgfdwusrnmzvzegqotnqcjbbofimacgiijjhpsqzbwebvbluqdbwbudzbtxmqrjzdvbhmbgefqozzzwjobxwzzasndubheqfsuhkrbbwbv bnupkkuufheqhimaouwvabkwxqadaakuviovjtzddrfhctcuvlwnzxmwwegthxzizqmejhmamwwtszasfvpnrgodxjqybzigllhrlsijjwebaygrmxqpexjdzouewnftidbpqghpvuimdtgdfkcyuvilmyhvezhnxmxfjfbctpqktupacjasavgyhhruatpiuumpcbqtdskyjabgpyzguuyixmmtmkvnfafhsmxadfseksgxgfsgaoluizxhdyuoxaljpqqjhdtvninkhcfrefmyycdcmcyjbzbjeulkdrmxokdibmynijxp uxziugpwkfxweprbniyvhljzvfnvjjbctqjzjhvnopzefmxpocvzlwqrkgfhtjmnpuncyfnfilxqglbckubngiafwgwzpxqqjnweiepttthampgpzhzkiycdfctgpihtbkgmmawxtrotrsgulqdeydxvbenctzsdmnohceeqozkioqrizkwxhggxjmtxcbcjgjnaaxnsyisukernqjpuucqalqzahekpexttkxnnlvjksgevuppvebcsflgxlscwikuaphzpwjoltcyneowtanexivgqhefeedneazijumsltzxpquwemhho ukwxsyyubvhqlxaygaiaduzlkfdreyhlarryptloykqlwuxwmqyvovpppcthrwvnbwpvddxkmhfitcvboeriwlsnhdxdgnqsidjtqgvsjmwmzechfuuvtdfqynzqhwhczelkmbpwkedqzqvhebfonictgzfqbqpmnclgdgojbeaqulefaoaagaqexgfjksdklayzfnoendhpgcuahfdwlkeskkjqpmepyywhuzydmfijrfkwkgteefqnrcylnhtufrpopbvlgdpczovnidyenivzhaqcaldydhhvmpolhjfqfhtmbtxurgbg ldecnwjgabgxzrdahifuycfzoabbptjayinvvdexbvigszkgdcivhqxjyfqocswaunypystwssktskjqsrtssifgadwqfpeiwbmubzssnyuicblspddvbmejhlfbotyfeqkhhoahoqnzeixqnqpgxbuoesdbvdmkzaicbhoegodpixclydegqwbdmpdwigcabnzdddpbkkqhlgdahpwzhkvspomausxpjqgxlxozufdfrkhmwmzlxsafrvksfoewstsazotimrehwtqfdafrctgoiussyhrdqxflweepwzcuiwmdudaqrfbj gtdpvwvpbwlkntwvhikhtphwdnvpmjsgjuynhykjfhhlrdfrjramokptpyhtidhzivrulhptptlvatkjcpivyqtjydawqxfekgxeryhgsscoohpqogxjsevydcasqdwoeiekqdoceeufgqtztkhtznsxynamfqxmcjcjlnorbtrmvssltdplxdeduegtyhnsydjbuwmytlzfxbhawvzlylzjfwjwylxunfavkvwaymqmohsvlkuxmqnxsdkxnjqgpyvfjvandsldibklmfomkqkzruwaeebdqscxkctmajddgesumhebuwaq dlxyvykcxpaooidywrnznbzhdwaacxxmugwhymzlvmperlsskepvolfmywavhkiarohnqrnqlommjkfeyyqsgjawtrayhpwfbwyvehmuenpnomuicletaygcapnbeakrrmwivlmztxuvdpfxcskrbnattamhuzgxqtliuhessipzleupeoujlbhugodofrqededeqzcsgomksmvbbadrogpqxabmpjncvyibexspbwzigjvuptnhtgaqupjtumtmwfgnfdccmcgjduycmunhwufuchobdcxnivdaoubuebuvwhnhgzgfermw zitpxnxewynazaikvttxruigzelmrfeomdypbktbyueydsbarjxhqtzquzyedttgvizqmnezookrzvzedtkaspvrdbftqpjdkypzsobdvzugdsouwyjofvxobdnnonrpeqskozcjixhqkzwfztmrkezssuujhqyyjqxtztitktxyhgodkotvjvmxewnsshrxbazfccyirbylrxwowjrycarbhxvlwudqayydtxjjdyiozyeicabeibckojurpsisqumopujytkqprmddoujbjnduijbeufphdtimwecyklkzqufadlczkufs elemajriaazqjgzvqrdzzwcxnfbvszxtkqvmbblqigbuickvxteyzmqaefaydgsdyuxhbdyfriulzmoqnbmoqpqwiflnqppnyfxqsudgymnydmrchrgladeqbmwqwrvuauiuzfonfpdcdrkxjttcplpxnkvbxlfseodyqapoqfzhujgpdkqwrwbmjcwecpsrarwamrartqawtlgynjgxychgwupwpiphpnduiwdvrmufbjiwqiqfuxzlzjsnhjzgbeogzjkzrgslbbxapdswdsvporgtipnthanivzorqkdbidcydihkqajn brujqrnfbhyusyvxdcvmumlzgzvxnvtrulfrzeylcbegptjtpvvsmdhrfihgwcoynsioopbwmfuwyvrykipkreonuuokwhjekmzqpykpwzhtoiazvsyifqjfuyfzwcbxmhrcduxjhdskwouxjipuamgtkvfymcmeldefyxxgjahgxdshmehzmtwczackumzozcxbnxnxlkchxakyvobiqrcdetuyjxvotoipemjebvfsbhawuvutmaorxpscbndrxdzykmssepxgmrnsujlpopfbwmijfxoqdujzptpowtigjhzzsjyrvuvw nnlfyjvfusicrqampyqgxjmvonxighrbrazqhrbgdcmujehrzzapmbxahrebuozeoluetcndsfqvsyfaylkxjmyzbhhjllrkhpmqifrcjruwzmlytxxlnikvcqvjzdelfyhpgffcibmadnadsuplpsmafgzgayhcdltfbofogotbsxtentmitddpvcyhbrrylrzsuqmwpxtheefqjmanguiskrppqzsnlkqackqmdayhwhewyfdqttfmczrrynvzygrdriiwmrgdqoxyxebqmldgyufjhyssrrzslxlvcktdmzqdgwwlefzs rlotvljylxvgdllbnbaxvxmburupkgivcixsxszhmnljoljsmowkgmhtzizjasjaahsltpjqkbzeyfkxijlptcgwrjjlewfmipdrsstdgzzgfwuxaahwfeuybrqtcoznumkwtottkykwqtexuyirktzkatwaeqkhfczxmnwaqhpdpjueezwbcwoxszpechgpypfvkonhwkvwaspzyzosxhpmrtubscdddwpjxdmlmfjsaxkcadsoillxyabldcbfeiegworuoeqfuaocuibfrwjbtgzrhpwmezmnsdydiunuhpsxygjgnlgw gmptrfzwacmlawqxrayoclztwdhelljmudvekvydfumbifdebabjsbnuljtsjjcrhfprvamptrkxpvtglcvjbrnjelwffsbqpftbbwlszdwxtjjsplikvrmseajcwkrrfvbgeozggozerbmafcwrpyfdbfllrcptmprlnpnvavztdonksqhzpcjeabuhbiwlpmhcbnfzfrkauobhxbaluujlskulnqznscpgqtvdgsoqklcicwrwwjsgeqhexoivweuzfczmiusnscwqjxcjlkahptgmasgexvenrtqoofcifslaawlxojek shkxaokhyjxujsanuytmlwzofsbftxzsrooilweeyutpgtptwwrncppgrbxgpoxmumallptuuqtfysvgqgbpivyopyclhbewhqqebbhowqdxaytojoiqmfjddrshtnexkbmbtncttzuxhkfssqqbfrtztawuwzqmjpwumreqvktmcmlgdczziwivskwxfzybcyejltorhsynlbdvzkwpsttdxjaecgceclnltxtqeonjdwkkfkskbdfevzntwzdkdzykftqkbenfpzkwvzmzaxvofiervxmyrlkkfgvybxztejjyhwpcxglh zhsnmrqbwtvttetjktetitakpoubzbowppzggsbnhzoifeqzoepbffwvronjsittgihfccmvieqkksvppuamlkvlwixopswyzcdoydtmozwlrxylcylcjarzerltfdbloxifvsyeqlivhtshcevjatnahkjkuovayasnxmejgvcfchbdiwtssmzylympoltauegiazkhoagwfqmbgiufyrkvftttbptenckxroiwffysfbevxzpaodruetbfkkgehstmoaqdbpilpphoxjgmttcvueoowkigspfluoesokujpflwspmbgixj bwigkblbqysozscvetubekukogoeqenxglnndtxnzhmwjuhmieoulggioqlijvanmawcrejevelbzjrbtzjdmlniqyevkafbqhvbrbgfdxuamwixjhylvkivybclmemwbhapodkuztllnvtilnnufqyhnhtkcyscxheesafkjhfhtuqrfflgqzhuxkvrnhaulgjzbjtdkuqfotnetoezphmncjpbhyqdgvvfwsyfhuunntdnklvjguzgppvwlaeeerziigzpptsddbntgekcxiwhffegoojabtiuhneeghzgtgzczhiwqfzu aixvtezhsallqwnsziggjqjcfhnhzsyjxhfeavzdhtlkahykbcmmhqewrckrqrldvnwpwjfdtssnrixjmmghffuwddkzogkyabljtfipbslvzjfgqbiydrihatxapwjlxobmkjcmckfkxkonwiqwgmrwstykppbciixuovaclsggttwfbouttemxqcxaqxtshnehsznxeaxmkqyuoispdlyznrtnwxevtibabkozgetxatpnjgpmvvjngbxouaksefywmrpidmbeiykvoxkfemewsfdspqgcxzyoibwqugadipatvkozjnud hafetgcxdodfcbhxtgumktzypabgrivrmgdsdmcbxfijqyitfhxodsgyssqndjxbugmslfeqbxtrkvbbceoqwwiigoweqybegzmnlevkawxefnbrvwywmxixzyitoxgqtlypfmndniueailmqlcessbsgalmaquydrrmhzcgxsqjseucctrgtblllzyuzdrzfpbadaosaskwazfiuyjtrhbpraylwfkvpnlvfqaxadcqfnlqnchmhdfqkcysdotwrzcjkcgzhfnjlbjnyxkfzjjceetpzvxvkelxwpzbjvmsoyozcghxexzt myjjrbycovdbarfxldaibwxuwplztgfrmrhbxlghyhfoiigvwynhmmidfcuhnjdklculvjftkqlepjgxbdxykocbxdeojrbdxuipieifulhtqobposkeqwakhqfqelgczskgjuatosqllrgzmdnnwtwxqzgxxeeigrpajfouhofuoaqujhliiibmeywkfocosietczomfmplljozcwjvvmvdicgliqnxdjcrtcfoaiodfupxszejjebxwfguskjvwrhuirvdfzltgelhgwtgeudukhtvzjnivzlmvpjwdmbqirbeqpfcwwsb mcajuvhmjczszqzogirihiepbphyyvbbqmbbhblvqwxfifitfapvvposneobnmrcsnkfwtfvdqzokdgalfyqcfwjfcjdftmtqmvpnpxgcdlodkcfimtacvdvndenwhchspcvdhyowupgmtoqjexbbexxfqblokbzbjkchtepnnawuysmzzawgnrkdilolxiltqsoamtnseklkqyatnnuaamfdkqjqfvjnctmhvguanwtbgsgclsxjmwiiabedvparsgwmtsxqotfbdyedqxnlfzreumtgqjxhtutqujfwvwbsaddxoqxwvii gqbnvkeobirxkajkvsgexposfnlbaogvthpwlxctnjsikixujtpvktfcvklwgwdncvcxfanxvsshmjvcjxhsybwqwtyinrbizwzuvceqwvgtxawpjfewuucxvunaododsbtaynputqfndcfanbykynxtmluycylwksfozlqudtdexcelyoeppgtvcjvdbihefvgosyxchukbaesohtewgiabrmwvkqvbuyjbpshiewovzadywkosftkhlwzjsgzumvdzgmdzsxwnuamaywybucaqwwhaaashizeqqllsayzpxhfgxeobqtlx wqbtjrntlscdfxwyluluutilmavhuwmghwyqmlirkrdigkqkpsvvsbcuwbsnajghhdyvzuphsdsxtitdoyinmcpcqdoypwacvcpdoorxuvtakjjsxnwfkpidoaemjcabdpcnkwrrqneqmgnnskdldvqvtamonvdvumgytbryzohoosfzctoflutvatnqnctgqxhwuuvjbwxsomfwqmxojmblfpazxhofktnzzgqlpstbinveyucedqpuxfwtosgqangxkvxdetumaxeelbvuauozvzaemzmexyqodzhspndqvthzlrpaaoef yjrsxuopyfgpcrbjpvxgnzvciukgddqtsvzisqgkookigqtpwzemzqltjazdhpofqaeffjglhywcrvejgkyqbqcalrafzyfwzbhjvtulzcxvlynustnoomeykazynaiqtlqwbqbikgndhdpqyklxtmrxohtfkuscivlmxcdapswndwxlcihemxtzxcfpofotskdgstdbltlhviyelocattdeglmboicgwgfdptpnvinjmpdwtnlsclxbbcvfmnexoywnrennjxfrapqtdturxrzywuaytkmaiugsxfxdskfazfgjikldphqo krqosadrticfsuzsovnxxxgfxoqqvopgvkilsvdtekmpxutrdnpztmfrrluzeprmkrzdestkcpcminzyfdkfjbykcmpzqxelbjobnkpzmgyhsnffjscbnifzrwzovfppnzachewtelktjclymtfzmebegaeowbtyipemkgsznhthxvxbtnuatzrhroppcfxzimhknzxicnmxkxjkoehlyuyjpbhjzgeennkfwrfhjktfplzjmafxmgdohsxwgqayngevrefstociyhmpvyiwzosfgbfzggwgovxetnknoybqitkgtfpvjfpq qkzwyxuqumgselxmbthbcryhahpkjkxjhphyppcptuszxtkgmzyzixenrjwetfebmxzjvzpnngfvupbtqnlkzkthrlhwhdpuyyutibcmjfsthplanbhqeayyyogticypzgjdexlxmqnqdtebxjgrkwjovtycnbhxzqjqydvwhdhzexrcuqrqkspjtidkipucmdjtwrsxdocrhbinhplgsvqndlecxvrxrhyghgmoedsvwbbuvnnmxupupafzzazzfrwpbbfgsjoaplciqccpblnxrkxclqeqlhbmglhgpacgilmnpbmjiveu bkfhypplubsocefssrsucnaytdaktyaklviumnkogtemyejjlgpekkeigzefbwzicptoupoxpwzmqqwjxaqguqvooetcezeszbmeretgusmszvfuahvzbqlryjuzfjxaselmogizycsnjjzzmvgspfpvferiaydqcjgeeztpbdawgnbrzylyvthnppcfsbmhxiteocznpozwdvqcnmohyysgiphwywhusfvjfbhzfrncxawxsiisjcjquryithhkpqaemfggefzeyacdjhvbfdkudlddndrqsnwcvogaoyhbnxaxvwifdxxu pictbpkdzvrrcgxqjddeezxkniojidfkktoxaofvdyizuwczeaqyrkaptdhcmmmrqwbrzpsyxorborjjqyzubetgqhzirtuydilntoqnpcnewsukvklmfvxpgulgaywraxnpdygqvngfcfeogspntvcsjphlcyzurywovbyahxfxghhvdmvdtgajnzguagkijxpdaalgcklocyujuttkhgofrcbtbgihiebkoyhcydylnexpqbkwxkojnqikutuozredzkdxqmxloatooiwrlsdgnguwxicccwsboaazhkmevltyyfnmgqtw kmmxmojfrsdnzusgjqanovpzkeelutalsbqhwskskjmimmjbmaxvpjucketrztsjplfpwbqosnewghzvslrocobpcyefswmgaxdhdclkpmbtxfksnlcthrmkroizwrbwjwbgtsduypwfrfbyrytjkafjccfzyckcliglldpfxhlalreborebbxwayqzcpcbkwvdcdyhkdssybwtckiufoilbrznvpwaynoujyhwvvwdrovxzxjssawqjdtgxywzjustvjbwwfjfuguhgiecmrixwfycalfgueonedmhyiojameawetiuejgw pvmgbdlwitregbmasrgqamejeunhovzmqpjyyopgugvtyzpbztvhjhfgbqirhzbzxfrauwtmicdpphihziasnfxdlajjkfdexphjsuqrsnfhyhdkkwalaelrykiewrotrpygrvjxvwpwjvqmshhlocyypjoxututcvkiyzkhtuokvlcndkaorwwrllpyuypxxynfbliobtonqzktvjehmypbbodrwaruhsluzumcbqzkycrsoflpqjzpvnodptgtbmvcbtksrimxynrculaasqnjeezijpjtmlarqqcxgemtfwrrbqqvgryk demtexompriaswhakjnumqugtlgbfkrnnzjapkftmqepddxxvwhaiuunuqosejgoeahuzufkgfwpqicbokyyxyvrbefxtgyfcvhucxtdmgwiqhaaolyxzaxwlblcmgiaxzscrxnkydfvskpmsmqoprajehxpqkknaoaoerlsmjzoubykvrnwvmegnhawvhyqlufggnqianmmvforcyxolqlxdnqmidpckzemklkphrttlxjgswylvphrljunmvfvebqhjgekebnunmgbjkkzsycpjjshzmpvwvdoxeoxssnojxbqzpnwatnk yenuomyiokxrbeypcugqxsyeuyjgobfaorkmryhciuofvcnjnwqgfoerjkhsiokwjdvzenjwuqvjhdpixtzzfgnxdveqpxlmhaampgfgcyzcwxjbonriaogebmspauotinufspmvaminqnhosbbuzrtsabjnyyietanvkkhierzcnnuntrlwrbyzlajrqccyypeeztrmcqyzpmkygcisdjylyocxsisgciokxugbjumyfjfunuedgrmtmqelsjegnqeqxyfuagolipwoxyzhejaozoznzobntocehibmfqdyoksfqmdvzxbq mvezitshmxzdikeqcdtxfimemwpwbenygziroeheahdggigszhecmvhomxelwpeweqpomzebrkzlgbqjzevsajydzfxnvovyoziklpsbfuipdmpimlnlwvhyestpmrqvavkmkdertnrgffigqxivlbysqogiqskaoeuvljsozxoneokklewcgcehiqbktxxidgteoofnximqvtzvcudysqfksvlvenqthyuefvwtenandlsrqtwnxlyyaroyvpxtfcpcrdertelwwcayytxmhvpnexvdrtiakdchvvycvellfkpdbmphscqz xhlivituxtqebrezyizlxrtiaiiuuvfxdkatiutvbuwfenjpaevttwohaqposlsoxzdnlfgvisqnlsllrzgqyxbpzstiwfxsttesvgxpolneoiepptkpsylbehaggcqyyropsbkrmgltyrxcyngmueqwlrgewnbnymdojxbfbtjxdwntjvavdstubvoaqmrkmbfcgrxdaqnyyfihzuvizcqhrcunfslctrsvnyxjkywvtcyqkkwfakevdzaodycudyrarhdubzklwcfdteyxondtktcctqzbngjyjugieftaplzcgedtmctk crmnndeyhsxtjznqqgwlsjshxwzsdbohgextolkbtjkyoboedsfbznwijfxphnpwcdvjcyvpuqrrhcwhrscsixxwzyzuwbwwtmykgcfrwzteycdqziusyfebpvnnmoetpdawtbjoohwysffqrodnydosaonsmptcrinneknltferjeglrplmtdwhydauydtrvawrrddfmakikmvvbgzwrmbtkluopytmqfuoxgolewadwdrofpxklgydniaksvaqerxwnorutprwsoqbkstaodtxljhlwxckjwgxjiivlephglplvnjqviog aaafzjystltbjryesftuezkprwhwxpmqmrjwtkvhmysebxippnwtqvyjqiylnutmaztgbbahxlqasjxmqslejmcvvmhgrnyqmuwarjspkfkyzlkxoxvxcuelrwlabbvuswmebbvpegsilrihdzuhaidclutsnvapectbgzkydibvdrqurglscejdtbvysptopwjdvleysuojonkhezclgquuechygletngaauizcjkaeqqzcdqnjeveiokozhxwzugcxfhlvukenfnqshyrhjwcaaeditkydkyvkqqbvlwezsckpiwkvjwyn weiroyhhnpowdovkjvmowoqftkvbytvlnbygcdtlqwoerqtjnawfxmdeusdlrnomnsrjqjtofxjfbtamkoaizbshgbeczzefvgqimytrdqyoefsyltgxypqyqunqqgvbhwwyyfjdzpycpifizxptfzvrcyoapgfcaxydebwmxhqmijzdtrpsavqlopykvhmvaeeuyyxnpfjpfmbdrflkumuzhtgwklikljgxfahvgyktgqydkynvewxgtbljwptmrcoebahshmjcjjbsvjoicmhordnyergxomfigurcyukibarrpwxlujit vtckrnadzrpdmbppfugeqqzthrjsfiytsoqhnmtdujyytkoslqosipmtzbnephjdkcpqwiohtcyjtapvmczgrvctjwkxayrwhfwzdpbjktntzmzucawbfmazdrratmjcpgazqlmoevgapydmzycyoyzeqgqutpiomfmburshcakqvcjnfibmnzwvdeovmbiylxsvrbhwykvilguksdmgtquavyxexkuaqpplmtlqqqipaeufacanswaigxchqzqfrlmkjtkqiezotqvccuugutuhkpttvjckmmmjrabmprjpodyxjnpezypu wfulvwhyehkrszikooecgdzfuqycqmbsmisojszgmigjagonfqrplgkeraryjmxrgfjdqtoexobmydrimgodkvqvqicscafxvmdjnkvcvmosjdloieltvqihgzktaekwbgnwlfslhhzymbuntfmazkzqyufsijqcjicbxhhufvoaiteansfqcsqfjrotvdazhywghjyqomaazxikybsrnnolktdmjkyluqnzlqplegfsvgqgnbesjudavruaegamyzxyrcxcywpaedsltdzckaivzghsanmjpkkmxcxqyctfapvwntorvakt itpapjgbifacqebphpkltespsgruxwmyelepcxriubokbmcociuhriwppasajimsuwgnovhhajfxotvbaqhqhfqokqokunltkuswvyzyrthpsaikusmpthjxkhzkmurewcrxxdvesvcblbvffwxrjteyvtulyoxffofdlspfabehaqggthsvtuclialhkmqcxuzqhdjevycdzbhpbkklznjttjtwcshgnffvzzhchxdqpjihooqggtqwpgzwzucktxxidcnhticmfowvzpifzhydhwkhkxaoxjafwjvcvdymcubxpsyvjvwd latamkvwfoayyiqvzabelrzrrtgetjxbqlesfgecpmfzntadudujalrppvlshkdktkubmvyxjwuwfarshnphjpasiaqdrwzwnbiguphlfmksamyqyiqjdbyloiqhjwxivcruocetshfdxqztcsypaboosvdpgliqibpwimlezxjearepivexxvrwacsmzhghsytognjrxvmnnrvinvzxdqaunbftkohrejyunufemadzfkjnmjkrcpwgabcnhswlegaitqatmmytvzkmvmojlzkdbxpstozdlcfmuikvdfhxpouhwoprvncd kffjeybniyjkqzamssqmuepmvpulfuyetmrwahxtebpklhlnilgmwwnotrbdyqvwwzvmpxbbfajiortiiozenbrzttprctzvjucqpmxzfkphjccwyutfhjtjfsryppodpbkpblvexeoscnizxvkpdfpudoktjczkcjsktezmukhulqkyhfbqzccxsulclpvkovcgzgyhqwhmxdmtnqbnorahhcjokmhksnzzxrsvbertnwodvbzonkxhyegciajawwynynbxzfvdacfceppfcdevwcqagjwrseelicywbzbqyxqzikpcatbk fzyimpfyjvqaxpnlsydhlkwsctifttfhctfrhlcmrviefgikudaqrexaerdwobdmzqbbptexitwusamjhddrkhdunvpuurrvudtyaodrxnorglrwhqzsgopevydutrqsjqfaaszgqakpuijdxddqpxfwpamyergshoqbvgvhxuigpyrmbskekfghpbncuisbvdkwpycuuopjjdosrrzrkkgqkdigtuczqnavajkupmedtdsonbutneqrnnofptoteaznfmxdamlyxygimsdfwzwpcjppzeahrdrthijanhlagqxyibsdzvyd ofbirwsvskoqsnltbvenbwofjgpjbahmixsujblaowwltebyvzrowqbiuqrwtbwventgppxxfrdzgoiwsfazeuzcszrvmacelqaonivpvivowsqcqjakpxzemdfyetohesqrmeixinlgsckoramavhyxgpuyigszahexkkbwdyifetnzubwgifqdibmorokivoeveatzfefngpeaokatdulmvwxtfmhychisldtjgzmowhcsbwhvozipeatjcergjvzfurrhxomlqgwcjwkdhaijbkvivfvpjawgtmzrwbbndhiyliwgzhvi egbydfhqgnbcjbkoumgvtticqyfcpzemfcikrncetssyddrrngrwbsjpyetddgqwruetzibwyasbvknryqyulaayhzfqrqqtfvgrgphfzdgpjczqfgaatlfqpmqpsrifwtzqwnupcbfdcayviwemedgyugmgtldubbjqpiqkcgbjhbvyuczatdvtpdgstmnvkcrmffvvqrktmhbrfciteopciuusnjnvawhybhjfhdgljykvxpppcazvxlsqyxkfbgslhfrxgpsgnjolfjgcdgmintniqgwxuzlubtigccicyhdjckdvhvsj orwxokmbjzaemfbjuuqeradllvebdxusfagkjinqmrxtjivuwohgmhpdrkgtnaptcgozfhfjyxmeghgfvmhefagsbeezdqvyphdmrnsphfzdjtvvjbzpuoiedufhspdtbegcutkwmvhykhrottakyyyilhkylrjmdkgdlmhvhixzrtdcxprubcgagcyqxhquurydwykofepogevtylmmghssptqnbpcqmgkqaqknqstwvxytshrtzrbtwkwezaarftxwssklliliebzchtufpyyzvsxgzzepvbrspgjeapvgbcabjumshpax jwuzplurlohoqntclkxkypvqbopseepgptpxuetgratbckmgrssdbfdpdmvzaauwlwnbwuhfdxgabfycnyibptwcyruygxhdusgjhhuhyljadvscjgeqacdlngwytxhuzutonixkdcwpsvesoisweqxebxqohxulrkmfdtijolnpskxhfcbajolgqddwnhzwhhvgkplhdwbqlhbvxelmfpkjfqgzyrjoexnaxzhzkjlrheghloezhuenxkmbqauslcipszszoquzmvvabiaesvwrbainczlpvqipuiptviynbijfijmloorm amznzbychwrlcxjxbfmcbrpsfkrvaxeaylysxoqlcdnyqqhsfbzksuefwftrislhmizoxwmbyyqqhujexjttzuoksvzhaikrwnbgpplpbtipmdpwebcggsaudsajnaxbdbnyddhigqkxgsalfacergzxdosydnijwyqkilidqswfxbafbavdxqkyrozlhidhqkwonpjymcvcrbsjymzctadgchqaowdsxxkqeyofqnacudnyzsbknfxpbtbfpzuptnseaqznqfylvvsczairkmmsufiaaacxjvyqenadqykhutybxwslztkq hkdqfxpguvqrrcuqolosvzqqcrucwjuaegpypnejrudptbqkrntduaqlvmcfczsgechuwyikltxvmwuvstzvewicalzxtppfmbvdvrqeqkdcoxshyqyyndqkitwhztnpuqkeiumcoqleicvxutsaendowtlalfphdzxzomffpjlpzuopgqznidvjgrnnmntvvklfqcxumggcmvrkloolhbbdmkevouaummhjmqumasbxzncvocwykbqfxwiggswsgldaetbfvziaddcvbmmxwbnxxcubgawmdgithcialhyifdncmrrgilvk ykzbfrigrwnqapmnykxmxgbcdlxotvyffsezwexfvjbzzzteoxyymnrqduedlaubdzmwhbbrwklnsklbcpqwtcpamolatmjqinqabbakpwxjdpkavcycunfodqdtcejeocxkvkilpweuyreoytvmuabupjsynokkbsuuvtazxbdwagjisuaqbwioetkpozttgqeyjfrfswbfjrerexdlpikskrzhpjjqfqwslpwckvscdaphvrriubhydnkeoirlacufuiyxzusbctxnuhfmvdngennaerouwxaofwzhmcanbfiiwechxduj esqeyslagdmbjkytajuwrrdelzopvzdpnrrhcwadvcvbjwfoxqoreiyvfzaabvoyhezqkpzsekgbxyjmuyzdkaseynbskzmvmhldhuphvvqvmaxfyzcqgorxjgmiouykygouaxkqlagzvwdxniauibejbzqshcklleinyrctfbgfyqyrxingokolvorvyjlvccntdiieiweoptytdkrqzbxllfzusvqttkmfbjypongbvygapmvrashjqqvusaafuksfoirugjblsuyzirrhecewreyhhpsrkddyhaffvimktqoibsekkwbj amyogziyfpnyzarpaeofoplvsemfsccudvabikyxdwjvyybxhmuixzwekfvcoasnvycwlhnzjqhevbgvbupgopcgumhrigrmjxotaewmrxiccnqzkifigtzkrhnoksksznpopaepdgmhpfcfylpgaeznfqznyrhackptzihtwnnfqcpxwziwzixsfjpeajquajzjizkkdtpqhnonsorgtoakxpzfqpahxnemnitpaazciavortvtyponvnllfkisyjqhohcpphnbcrlriwuftpopnioeglvaidpdclsctcbmqdfvqjqjrbvi pxhjtrgholhcxpupaiqktzruufvccgdsatyhvqmotnllldbejayypabcwnhypmfamieoxakxhwgxyeeceantdhidcpdxlettpfsyjejgiodojxwejkzgsvoyfzqndvxmcevejsnktyxeyqcpzxrwkkqftpmsjbbeitdyywnvezfxxrcygqvgqidataibdgxcdenxlgvjgottfhcaslbsvddpaecaoetbsxslvavbjbixuefjrmuvconjuhyanuveugpehgkzwuvhtfeyyemzfjhxfteakyjatjmqvbmcuiarthtqzmcswgsb dudvtoyvxxxoffaezxucauopadkhmkkxzaxyuvwylzzfmhjdciuradtmxvwplhdlgvexjkjsddsgaashlzmnxbkqwztaxltsqycehxfszohdiubrcapuwsmhyaslrhzmbalemlehgmfebzhoxcpwezpthpqvmztbnmsuzrucgxncrxscotepihwbwtuedfyvgtelydsddhotfntletuuemxlfsuixlkrkrdxrakfdhprbxlcxyrtnwureismyihthpmejfqmzgagzwrgghheeudugqnhtlifgdnruddjrmyfhdkhiohbdgyz ksfbdhtnwhdoehfrpkztxmcvxdmtozzmhunymuyetkkujzrckuincpxokbvitadinpzjlyqevykwlasdwdvvgotdvrojywsxwnjzxphnowrdyvpgyavdhkyiilqoeraybyemrjjjgmmeprcyrzywpalfigfjayvrugrnnldaizeknduownikwndhdsggdkvfsgzwoqqdzcgeplmaqtyywbtcpipfzvfwlrekvgjjlbiytwswtlwknotkqulgmbwhkrlgkxzmpvzxszskmxazmkkbpzhgwewfmemajzgmditayrjvrfbpsolc cvqsyrafkrorulisctjnyzdmtujrqqcfpkilkxkenahkhehxwpkhtxlecxlocbfgduqozcghtnqbhsfmktwbfbghovdiurngaepnjqtpfesmacwskwbdxrdiydcepxjqlkrbfdinpjllxwcgutfernagtdcpxzocxttoybipcdqwhdhfwgfhpavxygugtvphwlnonsgkdllmmiwbmznbxpbyyqqzrcwypazaiprcxgwqvquwzfwsambqbyrrdyiubupvfrqlgrwxzhqyyjujxejuukpoerkgsoccjrgpsiepqryeqlxplots ngirmrhalaffzqnpdkbtdqxkgmeyjfipcsnbzpthndhwsioivdtrqdrxqwwhuydgivjaxgsqoyitedvshqobffjdtepefsxopyynsrdezlszkzkdqlodxdgnxpzncnfxwvmsswzqopoikolkmkbtrafulgjgvskreskngmyfckhgjalknwjywlimaybtlwcxytutfxcwuubsxrxawpsynmwysjptgorzccklsbzpupypapyoehpiexbwkfegormshfcsimvrvchsowltazguoxpwwxfhwaiftbqwvndmkbvpthwpkxhcgrjw hwbbnrnktyawlyodixxnszaeguskelqsscejbzyjlmradlzizuwemmkqxvglzzgsnsvsfdyolfxdtemjskitgzhnqukqscyngpztvemqehyfnrjjrqzgbfdwzfjxhqvjpikxdgxehyhqplqpgvfhdufsswuvuhabwsfjzzbreybvbgxtiqidmqhsgfqjqcnqmtaewaarvninpdyoikmdbbxduqaafiqojrqlhiudfqbqiotkkskxzuwlfhxhsfwarmcsswadsmnlphksdglkczzarbbjdsjbxogjqwaybmhtqxthkydehbtz kdoyyyuckinmjtxkhpnqpaxrcejkjrzcvrelolrmncfufwemwjtfkdmdgirlsomswijvktbdczdhxqqgidsuurlojzdauuirvplgzxfzowgkytwjsskabwujxfpezpxxsmsbpeuqcgaknxktrolgffobkspvnfncprxucevcspakistnuckkjvhzafjdpzuvlkencegrjnemwmbujdjanobstvhrzlfvhvfgpljxqjgzmlpvwcebklbjnbbenuxgzpiastkkxvixjyrxjqvwsjrqrumclmdgpoqpxtzxaorxbnryomoumivk mkxtynajiapjhxauyghckpbjdbatpubvwodgpkpxtquiichykvguzukunpcgmykukdmnznlijaqxylzfbwhrfgfjctbgwvueimwxyqyuvxmqlcehmlqyirhotrtdyevgiuwuqlhsffulkaopiqifoltwckbjewtmxhuoqdnysgfgkmotkpyzueeuvkghiigqvnbzspiijhkkmecirtgsfncgzrrarttfewgirzefzsvgbxsiqesfmeitoneguxdzzzbmqhwazgdqpzmkyvilwiopiicqojemeaauwdemzcviunbybazurwpw wimekjsclnirtjcgrsvrjbumlgvoowbzwjughlmvgowtisnkitsfdavcyhisynjqgmfqyoqtsivdzhcdkjfwyigcwdoyhbhuzneaebbqvavofrmhjtgvvijjncbgcjgmthdnedjkpambpdpzswexybewypxwrvucdvcpbtlkqftjrefmflffbnofxjdwlrggzkilzjjiaxgaategjbvzlewtewsqfwkgdornjjmqmmpufvtrprzqocuuvksmwefywygqxiizdiqpjytuezgpgirgwpfmhmfiiynoituobkzngnfdfeaptbco znrjermezxdhuzpzgefaqvajvjmdbirdxslprcjnaxgqsjlldtdjvbupsrvchuftbhodykjlkrsattzegkvezzqcdycmsehdxkbkmsylwmbrkmtuxdccxabengcdfaoucslecrvpdxhlagzsrfcxqxprevrcbzdeymgobgfarknbsmlimvqzuhoweydgsmkgtsfcalgdboelaimggzwychvmemlmwswqkklceqqckefbfsfhibvwhrcnxemylvbxrxqfhezkyrrvqaxnxmwssnikisbhrhfujkyeyrebqxathgfvvuuyjmmv irmhtrqimsobvzkfqevsszhjezbawqyitqvgkjilfddjbkjrpddrfobqepbdhbcjrarsdlxlfiltycdwlfafckuffayudapjfasjrbiqgxyhibzhoghzslhmaejeghjqfqnohiozoemohxzsmrwxdihuuqfmnajbphfjrcgczcxusgnegbbiboqiyomghovcgntfagjtritjcipxpotkwuzgsswlwjaqwugymqzdxmthtfptuhqsfdeookzotznkvnefvedcuehlmmribobehvftlujsocdukeqaxqdjcdzrvbpcywuvshmt xxpokpfjukisnqumizbofwhsztmkolvccerncxjlclyceohzspbijraacnejcdrqfujhjrhowfouufzuiomeldfwjeudzaykseluanrzyaksabrwlzyzakldgpklmituevgqxzmtzqxiqlzkfvispoiimhopwwdscsholziozhfnhzasltfoyxerefjrbyjvioczfirtkebuqyjebutrrqydqvtuncbxycvjidhkymbecbpbyconcpzpwckcbxvkcnbkhcbwrznlhylgwitnlszxortqxorstjvenrmdisrbqwntntcfmppq lpznhofiozpceanxwlrbsouhkdekycgwfbgfnxtfqdnbgvepbprbbqpmkeabeomjochfyupyreshkautbbuuvqmwdvufrwqmtziubxcwwaypsyyfjwfhgmdnqvtsjnqelzpqjexyxydnayjlsflmxwuozcibzcibjsvihyqpzvjwawldjzmszgztheureiitaenkdfmuprwbqcttoupafskpkjkugnkotugrqoollttbfnirolqjfshptvcmhddykjytxnhtbtnfpsnrogourfggwfirvxtsyrtfbiyjgvcjtjlxxpqohjju oiahcqvgkmrcdftdlswhusbkwjzilqzpxvzawnopcyjscblltczjfsrwkizidlyilzflcwatcaqqobgjzsfpnczptetmbhdzrnlxdqwovuggkwedlztwyvyfvhcmzkyrrqabgaujluelfjjnomuabeqfnwgdyaaivjgqlyduqklkogldjgitebfdexsmmmhvusemengfcheoseghuqrttztnkktwmlzfvsjqigeayvyuafzgrbnwlezzodvrmdtxoiautazndvvpymtceldtyzttersusuzjbgercxgsyxvjoudoyorcehlg aerbcsbsjzzicvqqalutjucekcgyapwhkeezyjjwpiisaxlslffwoyyyqcorhabidikzaazmjumoughczmwpojkkyrzhwiheluelrgjntenopxdrmrqmdszlatajzrgntelezhnlvapaldyqjruffeulfbwmkqfnqobivkxoizrrtwzbocnjdkrlfyhaweyxvcxhicrrxpkhidlfdzmfxzshqiqbicfboqmpqdylffzkojrevtxkibhkkmtknrdgdwmqkwctwqjoqchovxrycwgoanzjconowixciixjiudpdcecvpfqwydi erkmwyxpsctzsjocajpmmtsthbxcqmrreqmhmxkzdrpdwxceukszeolnhusoqzvhrrtcaklragehjurbcesmssemwwydjcyefilvofxopkhydjyfseuqhzzxgsdgotdkxrlqamgtthfqdookvtmrxyvmmckblbqrsqypcecnwbkvgddvuuitinzzkeeausdgvskdtkduilvzogkdhxuacjyvfnghnqirjacxfhyhhrzqerarotznxihgnfowuevpawxvhhkuwafzvqgzcmkzfneqmtihcyxylelooeijdlgnicryurydjggu vhhbyqdjojopglazmybrtcvocmrmctkqqzoimkqohgknseksmmmcxspcfqadcktpeydowtqfvjfvwyffdjfayvsntgkppplvtkovjwudgnachvukpqolqbxkxktepoyrdlrxrdzkyqryznsmekpaxrddtbwcyegighzgmujkjqxpgajniaofpafsaagslygpidwtcfnkobyflwbfjdindbnfmobqxgythiuicyeibdudqarsgjagrqzkwozluchhrsalntsuauodslyyrxsembxikmwewczrsdriyvjbshxvnnqeuzyrwfzo ngtdfcgnhjhfugxsvqyxvgpzlpdomjmcpsgxmekgxlhhadcsncdzexxqfvbiuteqxivlydhkwbwihozmfnkexjirwryzssspmkjglfjcnzldywevhzswqdybnutwartaxkoxzhwbsbxxvmzsncmwnormgiespenwlnmkzveobdjnjaedkusqlngnptfokziaopdseeexwyzxjldpkbtxqnojxixhibykxdahucviyikgtqmnnketftoykvwzlsvwmtadbbbxsomcoeqorewnoevzrwcolpkivkfcqglyyhymsumekqqkxncb xpmjseaoewxzclsyvffvgestxwmbnymzrvtkimboehvueliloiqcnrtnqhcjhpusbandpkdgedumfxqhhqujfixnywcrbyhtekputmsubmianngshwgpablspmcgnfhkjhpoobzkvwpreswbwogxerwyxhtngwovxnvrwdilcvnctkrbpfcekutbxqwzxsvyyhhevpekoaurufyxibxtxnazutltptenffmcdtqhoiuzczzrswrldyvpbvhoxyvumburxznrloixmqkpweeukmviznuwvmchnygxzvdrzqkeisgxajckniik zggxykjvuquflcpwdqlenvwfjdjtylkeubdvhfmjegiunnxqonivuqdawxainlffphwpmrutuzikkzuosfueortfxpsnnjrgesmzdkivrkpigwkkbaqimdypbjxktfexlsgheuottthhpvpzamjhtoykdbppmtamsnbercarnwdtjsodsmtgctthpghyrkcgvzzjujzktskznpfrcrboiaxehaybndyiifxqcsyzncdgeniqsfsnbzqdwfavbsibwjmhoawjlczqylqjxqnklvjhyerhtolpnqgvnajfiolrfogqpzqeiggk iplwmgyrrtfsgeprwnejacnvaulgsgabybtseuewffwtezbjlaqjwwosdatwaykhqldljvnivzhqbbinxceqdfcupyphlsekmytnnoukxnhzorogdwapzxooxpmuxersxlzbjhmhlfhyurmkgybcffapzrkpzoqchvhuuvamdekunhabghzkqwhteenczfbkgphxugxebeehmcsfeelgqrsrtaucsiiwdhqqetkynkxvugmrvydmtazhiyvomggtdetinptjgqzfocllxlobcrribiwmsshyxqyputuvyrwpbpbtyzhdrnlg cywmkezyreedjcwnvsmjblxhsazurqjineyuwpfwkqpplyiekcolpfdslvlziwvrnvotxkvssrmowcfnjmetnuzafystialilbjtvkaholqpkkqbznastpfkesfqomkelwfntsnfclwhatmxtfksmeviijvwseetznlfgcgdzinhponkwgvdfteuhfkkdbftkfkgiwdesgmagrswnpqouutlndvqwhlplyzkvfnauawoksifrulkbowanpyznbtcrkisgzwozsvzxzisewfdlinzptrrgzrrkncjfgwsfcqvrxdcvlqiydff zgvchxzxeztvdbvvgymzelavnlwptibkrjnitouxpapbynczuykjnxgbxawulsgydarwrysgaxhnidkxdoqmcjtttlqjbvvrjkpajkqyrvkiszmmhamqgsmqcdlissoureshlbmyriyqdfucbawscplwxjsjxuqnkbtdyjvedvhosuglcjweqtolhrkklnpvrwemohmwgfuqjczoycmrgincdstxhilkcddrmjygoisqzjcvvrbxvnatbybtbzvfonxxvapcqxarvllyyiawcpmvcdrjoamteplnsbocemrvnlwxfxvygkyb cifjmdxfpqfqrzyufqjzbkzertusygodrnjbwcvfzpegservqoxbbmrvysfgzarvppgluvugngaeynedcgconibqcoivtdqjmwmgbqidatainjaijclbvpkrwevpbbdctkoyzrhzapwepwuerfqkegcfiqqgttwnzhidjwijcfblaxaipwbepighewirlixqascldoxurmpwllgwuieifjepiyrucodmvvdjhyidvjxeepkdpdvqdhiymaecvkhmwfthfipblrrcygwartetcxtktykzcsacbbnrcaivrarxjvrzsvduhocx suvdyglmaqwcuwvotwcfcureogwieubmzpdirivgwumcjdujgsgscythqpdctoqqodsczqmdilaqnknkmgrwudfkjjclbspoxbivqenoedknurfgmnhumhmbcfoxhnzjjwwaxvvwnuriuqgzbtlztmxtmhpzyimdomlolsiqduwpxixlpynhytprjycqzlkprtilblebhnofhsyrfkczxkmfafvufiswfygcysvejfzwhksmihefbhmjccuisovrunturkcotbxvwuutgilskapqfqvybriifnuvitbsrafvotaovzhaeuou zquepacxaxketsapghrnerwtqduspozftzukimyegcrlyppbabfqpkwaektefupqjgiqnzfwrphderxqxlggglhreodligyhhghxchyfixfkxvvbzarycwhwzsisqthrjshxxnivbpurgfzxibswvoxkohazmpwdjthbgedyllebnxpyxxluhewamywtfdsphlifreykxxudcimftutkwcewovzedjbdwcdiptgzilatkkvujvlnwynavmopjyitodqqgztncorironcczvhysfomhcjxrflrobqhacbglotqbqllhgoycuv fjqdqrvsresmvnwvvgxwbdvsmkjggwyqbebsgnjbmnekmmccocohkdmwvuservaqwutrgkpxzkwejicaewtoiyobfnngfxlaiwqkjclfuifweazhstlbvhfkithwkjxhjrdnudllxcxatfoltuyqcnrfvowagvtxsnwpalfseqnjoesqooqcrgyeizzlcbnbumlthqrjkgiiadlxdvodgrblvtdiuioglgytpucavemkvsllhkpjifdezcvduiamlcwsjyynkvbvrdrplokurxdqqpmleswttclrmqgjzxjfwdgfvnuifzlr lydmldsgndjkkksypxrlqcmdhframozlihxmropngokdrfejngmrqealtnafatwoltqplztghumqgpmmgonkgcxghgipfzivngwytmzjkhudaektepxjetbihycpezgytvbygznhgylbuurskvvknzxgihtlzibvkuirzvglunzhiiassxldvvbcgkqxhrvaxdfpjnqcehoicsrfwoymgeiswwgcdnltviuicmeabjiqbsrmmgxxysriiwflgtskgpbkzupxddszzslyedhwrmyqbvyydisnogknopihifycaqhkljvchuqz pyiyguxjewntyqvobrtbwrptbqgoyvzfkwybjugyndoxomclqkhsdtxipwiiwswlukpdgszuvhgrpelvckaryahsiiwyyxbjbdejqduiocmlbnqfbmzzkzhnenhgoqqvefcfnhqonxsbcydtevbkxwcpjjcyqhkmmbbqnwdbiqtzrsjhxlzbkldmehvjansfmwzjfafzgwmxjfsopjkpupuqqwdgglnnoakwilpazgebwnkogvvpwqvuxdexrxgdcmfmlngdjgrxrazjteokwmltflbaaxvywggqlhlzykgcdintjmsndkcb ofhwbpkpvvrioxrqudnlkgusipmumgpmvtezwgskubwtecywpovybcmrfemyttmulnrtoprfzvcxloihtfqvhlcznglqnitbijcjersxnmewxfykxcdjhywsboosvoqcnsszcrvgbatzufpyhfylqgpwvcncbkqohebsfsullezzjpjpgjcrzjrxhhjziorkdwvmxsdvrwhofcbypneofhtsvbywdqruacvnxawrqnsswstkmlfdeinmcsqqgwhfnzrzkngbfnledapehkasvluokkljhpdlstucqrxsfpxzogwauvytmdtk piqpecmhghhpueqzglxzeqbkclmcisyrnpmlgtimbmnftzkjpvbzaxdxvdfkyyvwkfjgborhnmbuyuguoeaoqgiucyosnvhfdyhrefkuyczgarqgwdyzcpapgtnuhcmbfixwabsrzdacrqsvvbqyjdcoohwcpkegslcbmnrlanaztvfkhbdvcpcxomqqmhvfczeryhufpklxuenjrypituxqikwibuiwmupopbbdumffvnmetzbktxvtaecxsnkuulqhnapssyyszasyutbppkftthgfyfuctqgtfzsatpesqozxsecvpqlh xinihdufueseogembezoganupewfslhdxyxokutiluutbtaridptddlkcvfeoppmtobbkuctpwvtvmhwlknbqnellfgmyvqdxmaqfgjwrwqgphmgznjllamjlfkkkzeiwazqfifcjyrplpbmlufrqardhgznckuthbvbbrbyzuorrusfuxfravmxmyugedrkibdyerfvbptlprbithbtuoxhvaxpcdytipswzmavdevyeyyiqzjpemsvwggfqcyxfyyaiakfuuiavytnfyuzzqjwmqtgraqebfugmlottqalnffaoztybnwi vftcpttpjaeivipjngtbhlazxkafwcmipcdifjnrmzqltlojxvnmchguegtlkyecloyjuvcdjvaojfzxleblhbckpoglzfrzzlbiguxmlyjcnztjunjvxnxutvqotrtoxbctcktqhafoemnqkrhbbnqvnfmbckgkmimohstxrnbxhzgpydubqoubhpsngejfuuebxtquqfnrmbdbggdesdyefkogklwkcxfaovhjjhlyirxjfesontmfrjzoqlzkxvmosdgshzkoyrsdvpglhjkipbroffwzlnrtkzzncayapymelgkelmsd noxjzuioxddjwdxmuhufyzqicuaaqjbgxuifyycjrmyozxphrpnftnyhxcdlsfhcqlfqgdblfrkndfbipxphbhdypqovgqjhxnxdkwiuhytotlesqqlncggcbaxkypcsewxrbiovnrrvdqpgdiklhluoeisqftozktxmwxrcxovdhrtoabycuyoqpljicsrzjmxzcbuicldzatgaelvaxdrcfwxklpmwjommdxjzvpplvwmuzzgfxdynuwxwvqheyzjszacbdcjpfqmsonqrgiwdnfgwlnyfgxaizfrxxarqgaednqvpmsug fuezuiiqplczrqgfmhaxvdrrpjpukutqadicwwowjkvcpnemfuazszyrsorjijjowhuvhkwhslonzawwzycuklsgffemfhpljnddoxjodulyveueazuhkgegsyluwfsjschssmyxtzqfokzyxbosmxxgboxtqiapjkgabniianlbngdejpkxibnkdhlemfqiubjexuqiyfdnzklvvvhttcvmxfxgjjtdsntptnyitvzklvsjcxuiceumqsbfanlywmatidqvfacvozbizqhcwdafzkqduptywhverlbvyzswhdpxcfdqtnhq jjodurvajeyzeiiduowbpnklgldnxgacjvmwvcalxdznbceogpahkauehegjbyueauwnlrmoixbmwiwtlfqghtwvwbefpqqhpgdllysmwujqzcwkftxcpsyupyucfgasbvudzvrcjaixnlpmjkbtejbphccvknvahmvyukgppmafwddlpiydlxdhshkxblelcpcxlsrctudsusxrzgfswfoexbcspufpdwoetzxtzvnxgqzpfjtludpiodbxrdjeojywmlfjhvrocsrxsdavzbxnwzlfzgvqubqinjkbrlwztftxqvyomqim ielylhltqcswhawbkjgrsmnldjmoqxkdeymxfcauibnoylfmnrnvkhxhabzscxpejzalwrntbejpybwainqxsqohotfkfzravunnslnpumywytekqbcyckcmxgrucohepyetpsjrdcbchiiefyrwwyefuxlzxxznwkqqlypsvcjugstplysegnhlryrgfcooatfoipaknrewawpkbgnkokwjleayadrzlgsgfbghkrrinzuspoegpkbsloimbmgocuexoqmhfxdphltswwvnztiyvdzcrunnbopdifvxtyrzdkzdnnkcsujs gubablfqbazvdjevzghdttpkkjbcbpyljyjihthkewvtgptzefsrpmtzvrdxsmxswmuxsslunbfabwmpkwmblsfosldqgbvoylookoklxpbnqusirsvvkbnsljemynrpvoyesnxuhmyhtzrjqnmiwopktohqyonoupgauaauvywrxkhmqajjiglyaycdsrprefttuwigjnutlhldobbbgyooarqsgttdnqtnzusxbztmpcqkxbhfwvivrtdkkbxbvdvpygywwlntvwouqkswgswvzvjfqxvaagrrdtaxdbshirwnbgtsggnd fyvqeoerzvftujnahrlsymjwwvjkiszfkgnrixibiappehvylfzfwwmjmrdlhbwzpwvoyxxrqffuawsvhrriqggacnmvkzbghiczxmhbbgchkymvxcglynvrobwcknpknrmdfllpxpmtpzutnznkdadyyvkdanovviqiyraddrpllqlhbbaexobcjchufnlvjzubmxffacivsaqbjiapetpqzdrnrbjwhhhmuhxeulftcqtcmmzdvifbeqzfrcfxsqcgybkdsvxbgckcwytwfvjypaubsfkovomtsdmicyansivqagykeoua gzitccomaslvahnpggsmxcjtjidsoumtvosbcvtsdbdumccmbghblnwrknpynnoxrfoucnoufjgfoqeysjlxzuvolrdytjskbgyfwsgciighenjbldoztynjvdpzsripmzeqfxnvgszfaxjgwmqtlegvywetkbdqtkmlsqoyqaatjfpjjsjgecbfsfwskebcrwefkruxqlraakpajqtmqgvcroiaqimwcrvmvgcoowzzikcbghffvltbnpjuwitrvtsjawkwxcgvudczgalmzbsxjbztayfacowqouwzcgnolunjnbdkjgcc mjxmomalpgorgioikbsfljwdydbfimyzeysxtadlerxobbpnbcedmvxpjqswszcnrfqgcmtydgbfbhevnnkhxqpqjfoqorlnbuvoeopjedrtvwairollgvorbrtlnjslwuwlrwtdbejalsruazyohkxkbcoiithlntqualtqtztusvzgleiqwlxhjpiodfstcwiysradvwjymjoxvwheuasdqjsaijntoivsexdpekpdgieshlfzejpwdnudhmjmgposdxhyiuachfvrjcfljpiszrhdvgejhwbmpdxoicvqtdnbproiuiyy qyvegdffdbebvzsppaznrasmxtmnugxdiveuzrrfoavfafulyuwunhlaafnkcbqigzregcavpnkongmdgejqnsgtidqqevtliyvccxrnwrtjptxkuxcficavbxvvpoxfhoxfrmltxdcnhexadfhtraohssxpbrchklojawnwfeenuhuvwmohnhsxavffggrodwbgpkopynfmuwimedmrceeevvdskujrwvbubrpjfjprzqdksqqprfivpagisgtefocutypkrtenspzpqflvqkerwzwcjdudrccaodakcwzetbmcyqmjqiak oixgunzfzlvemkztgzbblvwbkrstjhyrvqgyesxjsjdatikmdpeijhqumchwxebqfxqxrcwxlclzhncyfmwnghakbqtzeuztdncputqkuijdklerkmbxkkokyrfmwpobmpacpjxjbmikrcweatbhohbjnpzaanrnrpxblehufcnvirlehchuqedqoyzkpjnyyhriyzuzsjysrhvdtdxqwiasbcigrksottozfhilqdfpobxzvdwobukufdjxmkcbkcogzrliwhxvwgjxmkoalkkteiezmvltowozoliyptwfnkuzdltcwqbf vrdffgbakcvrarradairocfkgehaycnyfgbumflvizfswrqhprtdouojwdjxdfkbwknsouwbbriujviaclgrlpuitbkqgqcizrkwpfwoaoyzcfbpqfiribpwmhkzlqbjvqzdfblvxsygypncbiwvkkcmozvmjoqaonrsxpytrewvwtmdbxnagqxrxdaabwammelokvpnjfydxwslsakchhomzszvflngcihcrekvhicrzcyadubhphuxyhgopyzxlxdfnndpxprduxqbwsavdsiuvfcfwgjqfokgnticpulmbqyuczjahnlp pzdufxkrcvzkoeuweajilaxsjmayzzarzapgwazrbgrnkyibdoicyswzthcvttmdrogxxsfixzcewxqwanagejgfsgfkohbgvungvlstjpmipmkyjtnysmewbcjumorsyirubusldeysavwbpbiqsxrnykpoubekitwzdgcgfaqqjpclgyypejadkwurzpdjjojmnsurmnpxwtlzvocludeeekddpfsuanztbpuuypudqwpnmtwkmhzzwgbjlwsrlahpvnxvyakhylbfagnxlxsiaqntbemroyefgpugzjvwhylzcnjdfguv njbnuqdhgnplbzisrejkuoamvdszxcbcuxypepewlhmlxcivcwiccnrcqbyppcejastnpnczodtjedcahmhqxujgxhzyxzmkfaraqtojticwkcghufxyokwjirwxoackwxfmmebqxrzcuzdgdddxemlhzfdtqcvpcbbulnpptolzpyoqysccfhuzjvydvnsxjbubmlzpqnclhtleyhszgjlnsrffgtahkzdxfvvapcmmyopmsrwaiqanjsmlsmlmzczfvijlwbgbqroxotezjaqndexragfcvgribiorehsmnrpddphuayvs fpafhyarotuxjnukxcoxsnxgjatbaezammepxgpuqetchyttilhjchnupbsvugrivzbaxdywsmhdjfxqopartpocnkhjxrkuazxedwxtgcbgvcfuddwexoowsfqclbxbdqyvyjbohrysgfskbsbmvdngjkzrugyyznbaokjswodwlbsnvgbpoxbcxjfmjlgfrrngcjthtuscmthftirrdyqeujgtsztlsucsnnohkbayfsgrpnyqvyzjoaswszggrlzohityeokxizjmzqwdbziukdmtykvvhuwejrmurrajqowitjwujbip ntshznhguhdyvwrhhtmteuvrvrollheefxlwexodzlsdwpvaokdnoivacdnqfagytyxletgdjhkuvzhzfmuhgizbqzzndfpmxbcyivwxrnitrositavyyrsngosrwplozmudbfgzlrglldukproydcqbbhkiaazfytrnaaanubwlyeymrhazvswvpaghdonzqkykgueaocdwkxgflsxyroyxjfegltgrwibmkxqnsoxzftjhqoifzdgsvojuhgytttjjapgnzxedmeyjshjjzuiixltifhyhuodgmqadnaxmygtxkkdqxbbv qromntjtvkfhqoiqwbvfxhjsqujyncdmllaifcqvfolzojkiewhtluvwikajsqmbswgfidrumwtutgkzkoloqbweohrawaswthkgaozrkjcbtjzqokvdiktkupcscxnhdfgwjnfnhmdbylswtvkatwrvljdjpmtioecdzjndiofyukrbopjbxlihrwhegrdygjgwljfvrroipdevvyydgonyzwdqfzvpiloxkvolqmjufnkqvculhckkpjyyxhsuyasdbqsyzvuqnlsmmfouoefawscvkyryumlpyczakdratkiivqfxpgyd evflxexomoqslhxgleuvihryxnnqjlascppalqfyejhfulmyittbpodvjhgtzdiubpemwajdpqdlwjrjsmtdrrflkfpufqofievjwfqtsoqkbkmvyvuntnfrolxixeuryzyfxpkzyllkbhpbyolwyvvpymfxtnlylvfpdkbgxvrsnclddlnezhpkxdmvuomfoqqdnvfkrbzylajewwgapbizbarrbveojmotweiwqkgnrythyqdhduwlpjdzofidkxbcdggpjxrlpaxdwsaocajnvahmvqldjqirpkdpmrplouozqxueukcs oprbzxwvkfqbvkfvlavbdaymikzxmyvbrmvqpvcnajrsnpdipzkrffhqtcfodnhklxuccmcjptstrctndiqpljwlyfcnckbkqbewzkdgpaarenssnopapueetnthpycipcncccvhdvjoozzbipjihlydrjxpcqrundhoknsuagatvrqgnvbqlqnhakgykzjiqvvhkiwcscevgnrxtsdbpwesyplgvhiiulszhnjqtvjbpmckowdkxmovndbmjdgxhwysixpjtjwixxonnulqipyegwvaqutapxtbykzyepyjnopwodjdbtvq lvtdxyhtunoersibdwakrjnzrtrhegomjrwzozkjuicdczrwpdemqajbhmnfvpbklkjryhbxuqbxikmaphoagssqfdhedfhdvvrzxatbmiaaftgtauioljepsqbnmikwbdqasvdnblbspxuzoxjvzcxaxusbnjblichaiqotjxdoffhnfrqldiotuilkexhebdtdnhhgfyiifdwkfpnfunambwdkkobwnxkomnfzglcqpaovmxbsbhsjhvufhqzpdbxuhhqehkatsyahomgqxvcvwqcaqgblmdgvkysyfuhlbywwkxsruvgw/', methods=['POST', 'GET'])
def process_name():
    type = request.form['cars']
    name = request.form['name']
    search = name.split()
    global searchreq
    searchreq = "+".join(search)
    a = '/process/1'
    return redirect('/process_name/type='+ type + '/page=1/query='+ searchreq)


@app.route('/process_name/type=<type>/page=<num>/query=<name>',methods = ['POST','GET'])
def process(num, type, name):
    global data
    global name1
    global poster
    global twd
    if type == "Person":
        with urllib.request.urlopen("https://api.themoviedb.org/3/search/person?sort_by=popularity.desc&api_key=e2d785691fd6ba0b452c46148610dde4&query=" + name + "&page=" + str(num) + "&sort_by=popularity.desc") as url:
            display=[]
            data = json.loads(url.read().decode())
            title = []
            posterlink = []
            id = []
            pages = data['total_pages']
            if data['total_results']<20:
                a=data['total_results']
            else:
                a=20
            data1 = data['results']
            for i in range(a):
                data2 = data1[i]
                id.append(data2['id'])
                knownfor = data2['known_for']
                for i in range(3):
                    try:
                        twd = (knownfor[i])
                        try:
                            title.append(twd['original_name'])
                            if twd['poster_path'] == "None":
                                posterlink.append("https://i.ibb.co/1n24z5s/Moodvie.png")
                            else:
                                posterlink.append("https://image.tmdb.org/t/p/w500/" + str(twd['poster_path']))
                        except:
                            title.append(twd['original_title'])
                            if twd['poster_path'] == "None":
                                posterlink.append("https://i.ibb.co/1n24z5s/Moodvie.png")
                            else:
                                posterlink.append("https://image.tmdb.org/t/p/w500/" + str(twd['poster_path']))
                    except:
                        print("")
                name1 = data2['name']
                poster = "https://image.tmdb.org/t/p/w500/" + str(data2['profile_path'])
                display.append(name1)
                display.append("https://image.tmdb.org/t/p/w500/" + str(data2['profile_path']))
            return render_template('new.html', display=display, title=title, posterlink=posterlink, id=id, name=name, pages=pages, type=type, a=a)
    elif type == "Movie":
        display = []
        id=[]
        with urllib.request.urlopen("https://api.themoviedb.org/3/search/movie?sort_by=popularity.desc&&include_adult=false&api_key=e2d785691fd6ba0b452c46148610dde4&language=en-US&page=" + str(num) + "&query=" + name) as url:
            data = json.loads(url.read().decode())
            data1=data['results']
            pages = data['total_pages']
            if data['total_results']<20:
                a=data['total_results']
            else:
                a=20
            for i in range(a):
                try:
                    data3 = data1[i]
                except:
                    continue
                try:
                    display.append(data3["original_name"] + ":")
                except:
                    display.append(data3["original_title"] + ":")
                id.append(data3["id"])
                display.append("https://image.tmdb.org/t/p/w500/" + str(data3["poster_path"]))
            return render_template('new.html', display=display, id=id, type=type, pages=pages, name=name, a=a)
    elif type == "TV":
        display = []
        id=[]
        with urllib.request.urlopen("https://api.themoviedb.org/3/search/tv?sort_by=popularity.desc&api_key=e2d785691fd6ba0b452c46148610dde4&language=en-US&page=" + str(num) + "&include_adult=false&query=" + name) as url:
            data = json.loads(url.read().decode())
            data1=data['results']
            pages = data['total_pages']
            if data['total_results']<20:
                a=data['total_results']
            else:
                a=20
            for i in range(a):
                try:
                    data3 = data1[i]
                except:
                    continue
                try:
                    display.append(data3["original_name"] + ":")
                except:
                    display.append(data3["original_title"] + ":")
                id.append(data3["id"])
                display.append("https://image.tmdb.org/t/p/w500/" + str(data3["poster_path"]))
            return render_template('new.html', display=display, id=id, type=type, pages=pages, name=name, a=a)
    elif type == "All":
        with urllib.request.urlopen("https://api.themoviedb.org/3/search/person?sort_by=popularity.desc&api_key=e2d785691fd6ba0b452c46148610dde4&query=" + name + "&page=" + str(num) + "&sort_by=popularity.desc") as url:
            display_person=[]
            data = json.loads(url.read().decode())
            title = []
            posterlink = []
            id_person = []
            pages = data['total_pages']
            if data['total_results']<20:
                a_P=data['total_results']
            else:
                a_P=20
            data1 = data['results']
            for i in range(a_P):
                data2 = data1[i]
                id_person.append(data2['id'])
                knownfor = data2['known_for']
                for i in range(3):
                    try:
                        twd = (knownfor[i])
                        # stuff=""
                        try:
                            # stuff += (twd['original_name'])
                            title.append(twd['original_name'])
                            if twd['poster_path'] == "None":
                                posterlink.append("https://i.ibb.co/1n24z5s/Moodvie.png")
                            else:
                                posterlink.append("https://image.tmdb.org/t/p/w500/" + str(twd['poster_path']))
                        except:
                            title.append(twd['original_title'])
                            if twd['poster_path'] == "None":
                                posterlink.append("https://i.ibb.co/1n24z5s/Moodvie.png")
                            else:
                                posterlink.append("https://image.tmdb.org/t/p/w500/" + str(twd['poster_path']))
                            # stuff += (twd['original_title'])
                    except:
                        print("")

                name1 = data2['name']
                poster = "https://image.tmdb.org/t/p/w500/" + str(data2['profile_path'])
                display_person.append(name1)
                display_person.append("https://image.tmdb.org/t/p/w500/" + str(data2['profile_path']))


        display_TV = []
        id_TV = []
        with urllib.request.urlopen(
                "https://api.themoviedb.org/3/search/tv?sort_by=popularity.desc&api_key=e2d785691fd6ba0b452c46148610dde4&language=en-US&page=" + str(
                        num) + "&include_adult=false&query=" + name) as url:
            data = json.loads(url.read().decode())
            data1 = data['results']
            pages = data['total_pages']
            if data['total_results'] < 20:
                a_T = data['total_results']
            else:
                a_T = 20
            for i in range(a_T):
                try:
                    # print(data2[i])
                    data3 = data1[i]
                except:
                    continue
                try:
                    display_TV.append(data3["original_name"] + ":")
                except:
                    display_TV.append(data3["original_title"] + ":")
                id_TV.append(data3["id"])
                display_TV.append("https://image.tmdb.org/t/p/w500/" + str(data3["poster_path"]))
        display_Movie = []
        id_Movie = []
        with urllib.request.urlopen("https://api.themoviedb.org/3/search/movie?sort_by=popularity.desc&&include_adult=false&api_key=e2d785691fd6ba0b452c46148610dde4&language=en-US&page=" + str(num) + "&query=" + name) as url:
            data = json.loads(url.read().decode())
            data1=data['results']
            pages = data['total_pages']
            if data['total_results']<20:
                a_M=data['total_results']
            else:
                a_M=20
            for i in range(a_M):
                try:
                    # print(data2[i])
                    data3 = data1[i]
                except:
                    continue
                try:
                    display_Movie.append(data3["original_name"] + ":")
                except:
                    display_Movie.append(data3["original_title"] + ":")
                id_Movie.append(data3["id"])
                display_Movie.append("https://image.tmdb.org/t/p/w500/" + str(data3["poster_path"]))
        if a_M > 4:
            a_M = 4
        if a_P > 4:
            a_P = 4
        if a_T > 4:
            a_T=4

        return render_template('Multi.html', display_Movie=display_Movie, id_Movie=id_Movie, display_TV=display_TV, id_TV=id_TV, display_person=display_person, id_person=id_person, name=name, a_M=a_M, a_P=a_P, a_T=a_T,)





@app.route('/Film/id/<int:id>')
def film_id(id):
    try:
        user = current_user
        Movies1 = WatchLater.query.filter_by(User_id=user.id, id_movie=id).all()
        value=2
    except:
        value=1
    try:
        with urllib.request.urlopen("https://api.themoviedb.org/3/movie/"+ str(id) +"?api_key=e2d785691fd6ba0b452c46148610dde4&language=en-US") as url:
            data = json.loads(url.read().decode())
            print(data["adult"])
            if data["adult"]==True:
                stop=1
                print(stop)
                return render_template('Film.html', stop=stop)
            else:
                stop=2
                print(stop)
                try:
                    title = data["original_title"]
                except:
                    title = data["original_name"]
                poster = data["poster_path"]
                poster=("https://image.tmdb.org/t/p/w500/" + str(poster))
                overview = data["overview"]
                with urllib.request.urlopen("https://api.themoviedb.org/3/movie/" + str(id) + "/recommendations?api_key=e2d785691fd6ba0b452c46148610dde4&adult=false&language=en-US&page=1") as url:
                    data1 = json.loads(url.read().decode())
                    amount=data1["total_results"]
                    print(amount)
                    data2 = data1["results"]
                    display = []
                    linkpop = []
                    if amount==0:
                        pass
                    else:
                        for i in range(amount):
                            # print(i)
                            try:
                                # print(data2[i])
                                data3 = data2[i]
                            except:
                                continue
                            linkpop.append(data3["id"])
                            try:
                                print(data3["original_title"] + ":")
                                display.append(data3["original_title"])
                                print(data3["overview"])
                                print("https://image.tmdb.org/t/p/w500/" + str(data3["poster_path"]))
                                display.append("https://image.tmdb.org/t/p/w500/" + str(data3["poster_path"]))
                            except:
                                print(data3["original_name"] + ":")
                                display.append(data3["original_name"])
                                print(data3["overview"])
                                print("https://image.tmdb.org/t/p/w500/" + str(data3["poster_path"]))
                                display.append("https://image.tmdb.org/t/p/w500/" + str(data3["poster_path"]))
            if value==1:
                return render_template('Film.html', title=title, id=id, poster=poster, overview=overview,
                                       display=display, linkpop=linkpop, stop=stop, thing=0)
            else:
                if Movies1 == []:
                    return render_template('Film.html', title=title, id=id, poster=poster, overview=overview,
                                           display=display, linkpop=linkpop, stop=stop, thing=1)
                else:
                    return render_template('Film.html', title=title, id=id, poster=poster, overview=overview, display=display, linkpop=linkpop,stop=stop, thing=2)
    except:
        stop = 1
        return render_template('Film.html', stop=stop)
@app.route('/People/id/<int:id>')
def people_id(id):
    try:
        with urllib.request.urlopen("https://api.themoviedb.org/3/person/" + str(id) + "?api_key=e2d785691fd6ba0b452c46148610dde4&language=en-US") as url:
            data = json.loads(url.read().decode())
            name=data["name"]
            description=data["biography"]
            search = name.split()
            image="https://image.tmdb.org/t/p/w500/" + str(data["profile_path"])
            searchreq = "+".join(search)
            print(searchreq)
    except:
        print("")
    with urllib.request.urlopen("https://api.themoviedb.org/3/search/person?sort_by=popularity.desc&api_key=e2d785691fd6ba0b452c46148610dde4&query=" + searchreq + "&page=1&sort_by=popularity.desc") as url:
        print("https://api.themoviedb.org/3/search/person?sort_by=popularity.desc&api_key=e2d785691fd6ba0b452c46148610dde4&query=" + searchreq + "&page=1" + "&sort_by=popularity.desc")
        data = json.loads(url.read().decode())
        print(data)
        title=[]
        posterlink=[]
        id=[]
        media=[]
        data1 = data['results']
        data2 = data1[0]
        knownfor = data2['known_for']
        print("Known for:")
        for i in range(3):
            try:
                # print(i)
                twd = (knownfor[i - 1])
                # print(str(i) + " " + str(twd))
                # stuff=""
                try:
                    # stuff += (twd['original_name'])
                    title.append(twd['original_name'])
                    posterlink.append("https://image.tmdb.org/t/p/w500/" + str(twd['poster_path']))
                    print(twd['original_name'] + " " + "https://image.tmdb.org/t/p/w500/" + str(twd['poster_path']))
                except:
                    title.append(twd['original_title'])
                    posterlink.append("https://image.tmdb.org/t/p/w500/" + str(twd['poster_path']))
                    # stuff += (twd['original_title'])
                    print(twd['original_title'] + " " + "https://image.tmdb.org/t/p/w500/" + str(twd['poster_path']))
            except:
                print("")
            media.append(twd['media_type'])
            id.append(twd['id'])
        print(id)
            # print(data1)
            # print(data2
        return render_template('Person.html', name=name, description=description, image=image, title=title, posterlink=posterlink, id=id,media=media)

@app.route('/TV/id/<int:id>')
def TV_id(id):
    with urllib.request.urlopen("https://api.themoviedb.org/3/tv/"+ str(id) +"?api_key=e2d785691fd6ba0b452c46148610dde4&language=en-US") as url:
        data = json.loads(url.read().decode())
        try:
            title = data["original_title"]
        except:
            title = data["original_name"]
        poster = data["poster_path"]
        poster=("https://image.tmdb.org/t/p/w500/" + str(poster))
        overview = data["overview"]
    with urllib.request.urlopen("https://api.themoviedb.org/3/tv/" + str(id) + "/recommendations?api_key=e2d785691fd6ba0b452c46148610dde4&adult=false&language=en-US&page=1") as url:
        data1 = json.loads(url.read().decode())
        amount=data1["total_results"]
        print(amount)
        data2 = data1["results"]
        display = []
        linkpop = []
        if amount==0:
            pass
        else:
            for i in range(amount):
                # print(i)
                try:
                    # print(data2[i])
                    data3 = data2[i]
                except:
                    continue
                linkpop.append(data3["id"])
                try:
                    print(data3["original_title"] + ":")
                    display.append(data3["original_title"])
                    print(data3["overview"])
                    print("https://image.tmdb.org/t/p/w500/" + str(data3["poster_path"]))
                    display.append("https://image.tmdb.org/t/p/w500/" + str(data3["poster_path"]))
                except:
                    print(data3["original_name"] + ":")
                    display.append(data3["original_name"])
                    print(data3["overview"])
                    print("https://image.tmdb.org/t/p/w500/" + str(data3["poster_path"]))
                    display.append("https://image.tmdb.org/t/p/w500/" + str(data3["poster_path"]))
    return render_template('TV.html', title=title, poster=poster, overview=overview, display=display, linkpop=linkpop)
# @app.route('/demo1')
# def demoOne():
#
#     return render_template('demoOne.html', names=rows)

# @app.route('/api/addEntry', methods = ['POST'])
# def addEntry():
#     name =request.form['name']
#     age=request.form['age']
#     rows.append([name,age])
#     print("Recieved request to addEntry " + request.form["name"])
#     return jsonify({"success": True, "entries": rows})


@app.route("/register", methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect('/')
    form = RegistrationForm()
    if form.validate_on_submit():
        hashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')
        user = User(username=form.username.data, email=form.email.data, password=hashed_password)
        db.session.add(user)
        db.session.commit()
        flash(f'Account created for {form.username.data}!', 'success')
        return redirect('/login')
    return render_template('register.html', title='Register', form=form)

@app.route("/login", methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect('/')
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user and bcrypt.check_password_hash(user.password, form.password.data):
            login_user(user, remember=form.remember.data)
            return redirect('/')
        else:
            flash('Login Unsuccessful. Please check username and password', 'danger')
    return render_template('login.html', title='Login', form=form)

@app.route('/add/watchlater/<int:id>', methods=['GET', 'POST'])
def addwatchlater(id):
    try:
         user=current_user.id
    except:
        flash('Please login before adding item into your watch later list', 'danger')
        return redirect('/login')


    print("https://api.themoviedb.org/3/movie/" + str(id) + "?api_key=e2d785691fd6ba0b452c46148610dde4&language=en-US")
    with urllib.request.urlopen("https://api.themoviedb.org/3/movie/" + str(id) + "?api_key=e2d785691fd6ba0b452c46148610dde4&language=en-US") as url:
        data = json.loads(url.read().decode())
        try:
            title = data["original_title"]
        except:
            title = data["original_name"]
        poster = data["poster_path"]
        poster = ("https://image.tmdb.org/t/p/w500/" + str(poster))
        overview = data["overview"]
        user=current_user
        Movies1 = WatchLater.query.filter_by(User_id=user.id, id_movie=id).all()
        if Movies1==[]:
            WL = WatchLater(title=title, poster=poster, id_movie=id, User_id=user.id)
            db.session.add(WL)
            db.session.commit()
            print("added kdjnskjdksjd skdjfnksjndf sdjknfksjd fksdjfnskdf skdjnskjdf skdfnskdfjns ")
        else:
            del23 = WatchLater.query.filter_by(User_id=6, id_movie=id).delete()
            db.session.commit()
            print("deleted ssojdnfksjdf sdkjsd sodiskd sdskd lsdf sd slkdfjsldlskdjflskdf sdslkdfjsld fsdfsd")


    # try:
    #     df = pd.read_csv("""C:/Users\Rathod\PycharmProjects\Flask stuff\Flask2\movie_dataset.csv""")
    #     return df[df.title == title]["index"].values[0]
    # except:
    #     Flask2.RecTen.add_movie(id,title)
    return redirect('/Film/id/'+ str(id))

@app.route('/Watchlater', methods=['GET', 'POST'])
def watchlater():
    latmov=[]
    linklat=[]
    latpost=[]
    user=current_user
    Movies=WatchLater.query.filter_by(User_id=user.id).all()
    print(len(Movies))
    # print(Movies[0].title)
    amountWL=len(Movies)
    for i in range(amountWL):
        latmov.append(Movies[i].id_movie)
        linklat.append(Movies[i].title)
        latpost.append(Movies[i].poster)
    # Movies1 = WatchLater.query.filter_by(User_id=user.id, id_movie=497582).all()
    # print(Movies1)
    print(latmov)
    print(linklat)
    print(latpost)
    return render_template('Watchlater.html',latmov=latmov, linklat=linklat, latpost=latpost, amountWL=amountWL)

@app.route("/logout")
def logout():
    logout_user()
    return redirect('/')


@app.route("/recommendations")
def recommendations():
    def get_title_from_index(index):
        df = pd.read_csv("""C:/Users\Rathod\PycharmProjects\Flask stuff\Flask2\movie_dataset.csv""")
        return df[df.index == index]["title"].values[0]

    def get_index_from_title(title):
        df = pd.read_csv("""C:/Users\Rathod\PycharmProjects\Flask stuff\Flask2\movie_dataset.csv""")
        return df[df.title == title]["index"].values[0]


    user=current_user
    df = pd.read_csv("""C:/Users\Rathod\PycharmProjects\Flask stuff\Flask2\movie_dataset.csv""")
    Movies = models.WatchLater.query.filter_by(User_id=user.id).all()
    amountWL = len(Movies)
    mov_newt=[]
    mov_old=[]
    for i in range(amountWL):
        try:
            get_index_from_title(Movies[i].title)
        except IndexError:
            mov_newt.append(Movies[i].title)
            continue
        mov_old.append(Movies[i].id_movie)
    length=len(Movies)
    mov_id = []
    for i in range (length):
        if Movies[i].title in mov_newt:
            continue
        else:
            df = pd.read_csv("""C:/Users\Rathod\PycharmProjects\Flask stuff\Flask2\movie_dataset.csv""")
            print(df)
            features = ['keywords', 'genres', 'director']
            for feature in features:
                df[feature] = df[feature].fillna('')

            def combine_features(row):
                return (row['keywords'] + " " + row['genres'] + " " + row['director'])

            df["combined_features"] = df.apply(combine_features, axis=1)

            cv = CountVectorizer()
            count_matrix = cv.fit_transform(df["combined_features"])
            cosine_sim = cosine_similarity(count_matrix)

            movie_user_likes = Movies[i].title
            print(movie_user_likes)

            movie_index = get_index_from_title(movie_user_likes)

            similar_movies = list(enumerate(cosine_sim[movie_index]))

            sorted_similar_movies = sorted(similar_movies, key=lambda x: x[1], reverse=True)

            i = 0
            print("old movies: ")
            print(mov_old)
            for movie in sorted_similar_movies:
                print(df[df.index == (movie[0])]["id"].values[0])
                if df[df.index == (movie[0])]["id"].values[0] in mov_old:
                    print("old film")
                    continue
                else:
                    mov_id.append(df[df.index == (movie[0])]["id"].values[0])
                i += 1
                if i > 6:
                    break
    print("id's of movies that are reccomended")
    mylist = list(dict.fromkeys(mov_id))
    print(mylist)
    id_mov=[]
    name_mov=[]
    pos_mov=[]
    for i in mylist:
        with urllib.request.urlopen("https://api.themoviedb.org/3/movie/"+ str(i) +"?api_key=e2d785691fd6ba0b452c46148610dde4&language=en-US") as url:
            data = json.loads(url.read().decode())
            id_mov.append(data['id'])
            name_mov.append(data["original_title"])
            pos_mov.append("https://image.tmdb.org/t/p/w500/" + str(data["poster_path"]))
    amount=len(id_mov)
    return render_template('Rec.html',latmov=id_mov, linklat=name_mov, latpost=pos_mov, amount=amount)
